{
    "docs": [
        {
            "location": "/",
            "text": "Requirements\n\n\nIn order to use the SDK you need to install \nPi4j on your Raspberry\n.\n\n\nOnce you installed pi4j you can go further in this documentation.\n\n\n\nInformations\n\n\nSource code is available in the \nGithub\n repo with examples.\nThe javadoc will be generated and uploaded here : \nJavaDoc\n\n\nGet the SDK\n\n\nThe SDK is available on jitpack, so add the jitpack repository in you maven repositories.\n\n\n        <repository>\n            <id>jitpack</id>\n            <name>Jitpack</name>\n            <url>https://jitpack.io</url>\n        </repository>\n\n\n\n\nGo to \nthe jitpack page\n and check for the latest release or commit tag and add the dependency.\n\n\n    <dependency>\n        <groupId>com.github.coco33920</groupId>\n        <artifactId>AdafruitSeesawJava</artifactId>\n        <version>Tag</version>\n    </dependency>\n\n\n\n\nBasic Use\n\n\nAs a simple test and first step with the SDK you can recreate the BlinkExamples in the examples/gpio package.\nFirst, let's instantiate a Seesaw object :\n\n\n    Seesaw seesaw = new Seesaw(I2CBus.BUS_1);\n\n\n\n\nThe first parameter of the constructor is the bus on which your device is connected, i use the first bus, but put in here the bus you use.\nYou will need to init the device, call the method init() from the Seesaw object\n\n\n    seesaw.init();\n\n\n\n\nThese firsts two lines are the same every times.\nAfter, you need an object to control the GPIOs of the Seesaw\n\n\n    GPIOModule gpio = new seesaw.getGpioController();\n\n\n\n\nyou can also create a GPIOModule object with the seesaw :\n\n\n    GPIOModule gpio = new GPIOModule(seesaw);\n\n\n\n\nAfter, set the pin you want to use, like the pin \n15\n to OUTPUT like this :\n\n\n    gpio.setMode(Modes.OUTPUT,Pins.GPIO_15);\n\n\n\n\nThe Pins class is an enum to wrap all of the differents context for the pins (GPIO, ADC, PWM, etc.) you could use just \"15\" but i recommend to use the enum.\nYou can now make the LED blink with the setHigh(int) et setLow(int) methods of the GPIOModule :\n\n\n    gpio.setHigh(GPIO_15);\n    while (true) {\n        Thread.sleep(1000);\n        gpio.setLow(GPIO_15);\n        Thread.sleep(1000);\n        gpio.setHigh(GPIO_15);\n    }\n\n\n\n\nThe speed of the blinking can be adjusted with the sleep calls.\nDeeper explainations are in the corresponding pages.\n\nIf you have any questions contact me via email (\ncontact@nwa2coco.fr\n)\n\nFeel free to contribute or improve things on the github page",
            "title": "Home"
        },
        {
            "location": "/#requirements",
            "text": "In order to use the SDK you need to install  Pi4j on your Raspberry . \nOnce you installed pi4j you can go further in this documentation.",
            "title": "Requirements"
        },
        {
            "location": "/#informations",
            "text": "Source code is available in the  Github  repo with examples.\nThe javadoc will be generated and uploaded here :  JavaDoc",
            "title": "Informations"
        },
        {
            "location": "/#get-the-sdk",
            "text": "The SDK is available on jitpack, so add the jitpack repository in you maven repositories.          <repository>\n            <id>jitpack</id>\n            <name>Jitpack</name>\n            <url>https://jitpack.io</url>\n        </repository>  Go to  the jitpack page  and check for the latest release or commit tag and add the dependency.      <dependency>\n        <groupId>com.github.coco33920</groupId>\n        <artifactId>AdafruitSeesawJava</artifactId>\n        <version>Tag</version>\n    </dependency>",
            "title": "Get the SDK"
        },
        {
            "location": "/#basic-use",
            "text": "As a simple test and first step with the SDK you can recreate the BlinkExamples in the examples/gpio package.\nFirst, let's instantiate a Seesaw object :      Seesaw seesaw = new Seesaw(I2CBus.BUS_1);  The first parameter of the constructor is the bus on which your device is connected, i use the first bus, but put in here the bus you use.\nYou will need to init the device, call the method init() from the Seesaw object      seesaw.init();  These firsts two lines are the same every times.\nAfter, you need an object to control the GPIOs of the Seesaw      GPIOModule gpio = new seesaw.getGpioController();  you can also create a GPIOModule object with the seesaw :      GPIOModule gpio = new GPIOModule(seesaw);  After, set the pin you want to use, like the pin  15  to OUTPUT like this :      gpio.setMode(Modes.OUTPUT,Pins.GPIO_15);  The Pins class is an enum to wrap all of the differents context for the pins (GPIO, ADC, PWM, etc.) you could use just \"15\" but i recommend to use the enum.\nYou can now make the LED blink with the setHigh(int) et setLow(int) methods of the GPIOModule :      gpio.setHigh(GPIO_15);\n    while (true) {\n        Thread.sleep(1000);\n        gpio.setLow(GPIO_15);\n        Thread.sleep(1000);\n        gpio.setHigh(GPIO_15);\n    }  The speed of the blinking can be adjusted with the sleep calls.\nDeeper explainations are in the corresponding pages. \nIf you have any questions contact me via email ( contact@nwa2coco.fr ) \nFeel free to contribute or improve things on the github page",
            "title": "Basic Use"
        },
        {
            "location": "/Analog & Pwm/",
            "text": "Read\n\n\nThe analog read method is provided by the AnalogModule, with only one method \nreadChannel(int channel)\n use the Pins class to use a more user-friendly way to use the channel.\n\nThe method give you a number between 0 and 1023 (10 bits ADC)\n\n\n    AnalogModule analog = new AnalogModule(seesaw); //Instance of a new AnalogModule with the Seesaw device \n    while(true){\n        System.out.println(analog.readChannel(ADC0)); //Print the value of the channel ADC0 (pin 2)\n        Thread.sleep(10); //Minimum 1 milliseconds between the multiple reads\n    }\n\n\n\n\nWrite\n\n\nThe analog write method is provided by the PwmModule, with only one method \nwritePwm(int pin,byte value)\n use the Pins class and one of the PWM channels (Pins.PWM1/2/3/4)\n\nYou must provide a byte as the value, between 0 and 255 - unsigned - and -128 and 127 (signed)\n\n\nTo test the example you will need a LED with the anode connected to the PWM pin 5 (PWM2) through a 330\u03a9 resistance and the cathode connected to the ground\n\n\n    //The PWM Wave Example - Full code at https://github.com/coco33920/AdafruitSeesawJava\n    PwmModule pwmModule = new PwmModule(seesaw); //Instance of a new PwmModule with the Seesaw device\n    byte i = 0; //Start value\n    byte pas = 1; //Change the showed value every step\n\n    while(true){\n        pwmModule.writePwm(PWM2, i); //Show the value on the LED connected to the pin 5\n        i+=pas; //increment the value for the next step\n\n        if(i==(byte) 255){\n            pas = -1 //Reverse\n        } //Do not go further 255 or you will get an IOException\n\n        if(i==(byte)0){\n            pas = 1; //Reverse\n        } //Do not go bellow 0 or you will get an IOException\n\n        Thread.sleep(10) //10ms is a good delay\n    }\n\n\n\n\nWrite and Read\n\n\nYou can connect an analog input and an analog output to control for example the brightness of an LED\n\nTo test the example you will need a LED with the anode connected to the PWM pin 5 (PWM2) through a 330\u03a9 resistance and the cathode connected to the ground, and a potentiometer connnected to your Seesaw with the middle electrode connected to the Analog Input 2 (pin 2, Pins.ADC0)\n\n\n    //The AnalogReadPwmOutputExample - Full code at https://github.com/coco33920/AdafruitSeesawJava\n\n    //Create an instance of the two needed modules\n    PwmModule pwmModule = new PwmModule(s);\n    AnalogModule analog = new AnalogModule(s);\n\n    //Write the LED to 0 to make sure you will not go further 255\n    pwmModule.writePwm(PWM2, (byte) 0);\n\n    while (true) {\n        int i = analog.readChannel(ADC0); //Read the value of the potentiometer, from 0 to 1023\n        int output = Math.round(i * 0.2490234375f); //Map the value of the potentiometer from the range 0-1023 to 0-255 with the basic formula\n\n        if (output < 1) {\n            output = 0;\n        }\n        if (output > 255) {\n            output = 255;\n        }\n\n        pwmModule.writePwm(PWM2, (byte) output); //Write the value\n        Thread.sleep(1);//Sleep 1ms is good for a real-time feeling\n    }",
            "title": "Analog & Pwm"
        },
        {
            "location": "/Analog & Pwm/#read",
            "text": "The analog read method is provided by the AnalogModule, with only one method  readChannel(int channel)  use the Pins class to use a more user-friendly way to use the channel. The method give you a number between 0 and 1023 (10 bits ADC)      AnalogModule analog = new AnalogModule(seesaw); //Instance of a new AnalogModule with the Seesaw device \n    while(true){\n        System.out.println(analog.readChannel(ADC0)); //Print the value of the channel ADC0 (pin 2)\n        Thread.sleep(10); //Minimum 1 milliseconds between the multiple reads\n    }",
            "title": "Read"
        },
        {
            "location": "/Analog & Pwm/#write",
            "text": "The analog write method is provided by the PwmModule, with only one method  writePwm(int pin,byte value)  use the Pins class and one of the PWM channels (Pins.PWM1/2/3/4) You must provide a byte as the value, between 0 and 255 - unsigned - and -128 and 127 (signed)  To test the example you will need a LED with the anode connected to the PWM pin 5 (PWM2) through a 330\u03a9 resistance and the cathode connected to the ground      //The PWM Wave Example - Full code at https://github.com/coco33920/AdafruitSeesawJava\n    PwmModule pwmModule = new PwmModule(seesaw); //Instance of a new PwmModule with the Seesaw device\n    byte i = 0; //Start value\n    byte pas = 1; //Change the showed value every step\n\n    while(true){\n        pwmModule.writePwm(PWM2, i); //Show the value on the LED connected to the pin 5\n        i+=pas; //increment the value for the next step\n\n        if(i==(byte) 255){\n            pas = -1 //Reverse\n        } //Do not go further 255 or you will get an IOException\n\n        if(i==(byte)0){\n            pas = 1; //Reverse\n        } //Do not go bellow 0 or you will get an IOException\n\n        Thread.sleep(10) //10ms is a good delay\n    }",
            "title": "Write"
        },
        {
            "location": "/Analog & Pwm/#write-and-read",
            "text": "You can connect an analog input and an analog output to control for example the brightness of an LED To test the example you will need a LED with the anode connected to the PWM pin 5 (PWM2) through a 330\u03a9 resistance and the cathode connected to the ground, and a potentiometer connnected to your Seesaw with the middle electrode connected to the Analog Input 2 (pin 2, Pins.ADC0)      //The AnalogReadPwmOutputExample - Full code at https://github.com/coco33920/AdafruitSeesawJava\n\n    //Create an instance of the two needed modules\n    PwmModule pwmModule = new PwmModule(s);\n    AnalogModule analog = new AnalogModule(s);\n\n    //Write the LED to 0 to make sure you will not go further 255\n    pwmModule.writePwm(PWM2, (byte) 0);\n\n    while (true) {\n        int i = analog.readChannel(ADC0); //Read the value of the potentiometer, from 0 to 1023\n        int output = Math.round(i * 0.2490234375f); //Map the value of the potentiometer from the range 0-1023 to 0-255 with the basic formula\n\n        if (output < 1) {\n            output = 0;\n        }\n        if (output > 255) {\n            output = 255;\n        }\n\n        pwmModule.writePwm(PWM2, (byte) output); //Write the value\n        Thread.sleep(1);//Sleep 1ms is good for a real-time feeling\n    }",
            "title": "Write and Read"
        },
        {
            "location": "/gpio/",
            "text": "Modes\n\n\nI recommend you to import static all the Pins class, in the document i will assume it's done\n\n\n    gpio.setMode(Modes mode, int... pins);\n\n\n\n\nThe first parameter is the mode, Modes is an enum, you can use Modes.OUTPUT, Modes.INPUT, and the two inputs modes INPUT_PULLUP and INPUT_PULLDOWN\n\nTo set the GPIO9 and GPIO15 to \nINPUT_PULLUP\n and GPIO10 to \nOUTPUT\n :\n\n\n    gpio.setMode(Modes.INPUT_PULLUP, GPIO_9, GPIO_15);\n    gpio.setMode(Modes.OUTPUT, GPIO_10);\n\n\n\n\nEvents\n\n\nBy default the events are triggered by the Interrupt pin, so unless you want to try for fun i recommand to not change the default event mode\nTo register a listener use the \nregisterListener()\n method :\n\n\n    gpio.registerListener(int pin, PinListenerDigital listener)\n\n\n\n\nIn example, register a listener to pin 15 to set high the pin 10 and the pin 9 to set low pin 10 (with java 8 lambda expressions).\n\n\n    gpio.registerListener(GPIO_15, event -> gpio.setHigh(GPIO_10));\n    gpio.registerListener(GPIO_9, event -> gpio.setLow(GPIO_10));\n\n\n\n\nAnd if you wire two buttons to the pins 15 and 9 and one led to the pin 10 of the Seesaw you will be able to turn the LED OFF and ON !\nIf you really want to change the event mode to the previous manager (by checking the state of the pin) you can by calling the setEventMode() method\n\n\n    gpio.setEventMode(EventMode.THREAD_TEST_MODE);\n\n\n\n\nOutput\n\n\nTwo methods are defined to perform this task, the \nsetHigh(int pin)\n and \nsetLow(int pin)\n methods. \n\nJust wire a LED on the pin 15 of the Seesaw to see this !\n\n\n    //You need to register the pin 15 as output :\n    gpio.setMode(Modes.OUTPUT, GPIO_15);\n    //After just use the methods :\n    gpio.setHigh(GPIO_15);\n    Thread.sleep(1000)\n    gpio.setLow(GPIO_15);\n\n\n\n\nYou can also activate and deactivate the triggering of the interrupt pin if the state of a pin changed (it's used to track the events on the default event manager)\n\n\n    gpio.setMode(Modes.OUTPUT, GPIO_15);\n\n    gpio.activateInterrupt(GPIO_15);\n    gpio.disableInterrupt(GPIO_15);\n    //Full example with the isInterrupted() function bellow\n\n\n\n\nRead\n\n\nYou can read the state of a pin in the GPIO by using the \nreadGpio(int pin)\n method.\n\n\n    gpio.setMode(Modes.OUTPUT, GPIO_15);\n    gpio.setLow(GPIO_15);\n\n    gpio.readGpio(GPIO_15); //Should be false\n    gpio.setHigh(GPIO_15);\n    gpio.readGpio(GPIO_15); //Should be true\n\n\n\n\nYou can also get if a pin state changed with \nisInterrupted(int pin)\n if you activated the triggering of the interrupt pin on the pin\n\n\n    gpio.setMode(Modes.OUTPUT, GPIO_15);\n    gpio.activateInterrupt(GPIO_15);\n    gpio.isInterrupted(GPIO_15) //Should be false\n    gpio.setHigh(GPIO_15);\n    gpio.isInterrupted(GPIO_15) //Should be true",
            "title": "Gpio"
        },
        {
            "location": "/gpio/#modes",
            "text": "I recommend you to import static all the Pins class, in the document i will assume it's done      gpio.setMode(Modes mode, int... pins);  The first parameter is the mode, Modes is an enum, you can use Modes.OUTPUT, Modes.INPUT, and the two inputs modes INPUT_PULLUP and INPUT_PULLDOWN To set the GPIO9 and GPIO15 to  INPUT_PULLUP  and GPIO10 to  OUTPUT  :      gpio.setMode(Modes.INPUT_PULLUP, GPIO_9, GPIO_15);\n    gpio.setMode(Modes.OUTPUT, GPIO_10);",
            "title": "Modes"
        },
        {
            "location": "/gpio/#events",
            "text": "By default the events are triggered by the Interrupt pin, so unless you want to try for fun i recommand to not change the default event mode\nTo register a listener use the  registerListener()  method :      gpio.registerListener(int pin, PinListenerDigital listener)  In example, register a listener to pin 15 to set high the pin 10 and the pin 9 to set low pin 10 (with java 8 lambda expressions).      gpio.registerListener(GPIO_15, event -> gpio.setHigh(GPIO_10));\n    gpio.registerListener(GPIO_9, event -> gpio.setLow(GPIO_10));  And if you wire two buttons to the pins 15 and 9 and one led to the pin 10 of the Seesaw you will be able to turn the LED OFF and ON !\nIf you really want to change the event mode to the previous manager (by checking the state of the pin) you can by calling the setEventMode() method      gpio.setEventMode(EventMode.THREAD_TEST_MODE);",
            "title": "Events"
        },
        {
            "location": "/gpio/#output",
            "text": "Two methods are defined to perform this task, the  setHigh(int pin)  and  setLow(int pin)  methods.  \nJust wire a LED on the pin 15 of the Seesaw to see this !      //You need to register the pin 15 as output :\n    gpio.setMode(Modes.OUTPUT, GPIO_15);\n    //After just use the methods :\n    gpio.setHigh(GPIO_15);\n    Thread.sleep(1000)\n    gpio.setLow(GPIO_15);  You can also activate and deactivate the triggering of the interrupt pin if the state of a pin changed (it's used to track the events on the default event manager)      gpio.setMode(Modes.OUTPUT, GPIO_15);\n\n    gpio.activateInterrupt(GPIO_15);\n    gpio.disableInterrupt(GPIO_15);\n    //Full example with the isInterrupted() function bellow",
            "title": "Output"
        },
        {
            "location": "/gpio/#read",
            "text": "You can read the state of a pin in the GPIO by using the  readGpio(int pin)  method.      gpio.setMode(Modes.OUTPUT, GPIO_15);\n    gpio.setLow(GPIO_15);\n\n    gpio.readGpio(GPIO_15); //Should be false\n    gpio.setHigh(GPIO_15);\n    gpio.readGpio(GPIO_15); //Should be true  You can also get if a pin state changed with  isInterrupted(int pin)  if you activated the triggering of the interrupt pin on the pin      gpio.setMode(Modes.OUTPUT, GPIO_15);\n    gpio.activateInterrupt(GPIO_15);\n    gpio.isInterrupted(GPIO_15) //Should be false\n    gpio.setHigh(GPIO_15);\n    gpio.isInterrupted(GPIO_15) //Should be true",
            "title": "Read"
        }
    ]
}